package views.models_panel;

import controllers.ModelsPanelController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import models.FileModel;
import models.ImportedData;
import models.ThreeDModels;
import org.apache.commons.io.FilenameUtils;

public class ModelsOptionPanel extends JPanel {

    /**
     * Automatically generated by eclipse.
     */
    private static final long serialVersionUID = -2454635272069727627L;

    private ModelsPanelController controller;

    private List<JCheckBox> checkBoxList;
    private JPanel checkboxPanel;
    private JScrollPane jScrollPane;
    private JButton generateButton;

    private boolean areCheckBoxesEnabled;
    private boolean allDataReadyForGeneration;

    public ModelsOptionPanel() {
        setBorder(BorderFactory.createTitledBorder("3D Models"));
        setLayout(new BorderLayout());

        checkBoxList = new ArrayList<>();

        checkboxPanel = new JPanel();
        checkboxPanel.setLayout(new BoxLayout(checkboxPanel, BoxLayout.Y_AXIS));

        jScrollPane = new JScrollPane(checkboxPanel);
        add(jScrollPane, BorderLayout.CENTER);

        generateButton = new JButton("Generate");
        generateButton.addActionListener((ActionEvent e) -> controller.generateModels());
        disableGenerateButton();
        add(generateButton, BorderLayout.SOUTH);
    }

    public void setController(ModelsPanelController controller) {
        this.controller = controller;
    }

    public void updateModelList(ThreeDModels models, ImportedData importedData) {
        checkBoxList.clear();
        checkboxPanel.removeAll();
        models.getModels().forEach(model -> addCheckBox(model));

        updateButtonStates(models, importedData);
        repaint();
        revalidate();
    }

    private void addCheckBox(FileModel model) {
        JCheckBox checkBox = new JCheckBox(FilenameUtils.removeExtension(model.getFileName()) + isBuiltInText(model));
        checkBox.setSelected(model.isSelected());
        checkBox.setEnabled(areCheckBoxesEnabled);
        checkBox.addItemListener((ItemEvent e) -> {
            int indexOfChangedItem = checkBoxList.indexOf(e.getItem());
            controller.updateSelection(indexOfChangedItem, e.getStateChange());
        });

        checkboxPanel.add(checkBox);
        checkBoxList.add(checkBox);
    }

    private String isBuiltInText(FileModel model) {
        return model.isDeletable() ? "" : " (built-in)";
    }

    public void toggleButtons(boolean isEnabled) {
        areCheckBoxesEnabled = isEnabled;
        checkBoxList.forEach(checkbox -> checkbox.setEnabled(isEnabled));

        generateButton.setEnabled(isEnabled && allDataReadyForGeneration);
    }

    public void updateButtonStates(ThreeDModels models, ImportedData importedData) {
        if (models.getSelectedModels().isEmpty()) {
            disableGenerateButton();
        } else {
            enableGenerateButton(importedData);
        }
    }

    private void disableGenerateButton() {
        allDataReadyForGeneration = false;
        generateButton.setEnabled(allDataReadyForGeneration);
        generateButton.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        generateButton.setToolTipText("Select one or more models to generate.");
    }

    /**
     * Enable the generate button if necessary.
     *
     * @param importedData - imported data must not be empty.
     */
    private void enableGenerateButton(ImportedData importedData) {
        if (importedData.getNumSelectedPeople() > 0) {
            allDataReadyForGeneration = true;
            generateButton.setEnabled(allDataReadyForGeneration);
            generateButton.setBorder(BorderFactory.createLineBorder(Color.GREEN, 5));
            generateButton.setToolTipText("Generate selected 3D models for the input.");
        }
    }
}
