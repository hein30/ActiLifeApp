package views.data_panel.tabbedPane;

import controllers.DataPanelController;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import models.ImportedData;
import models.Subject;
import models.Subjects;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;

public class DataSubjectListPanel extends JPanel {

    /**
     * automatically generated by eclipse
     */
    private static final long serialVersionUID = -7226316184972082672L;
    private DataPanelController controller;

    private JPanel mainPanel;

    private JButton selectAll;
    private JButton deselectAll;

    private List<JList> listOfJList;


    public DataSubjectListPanel() {
        setBorder(BorderFactory.createTitledBorder("Subjects"));
        setLayout(new BorderLayout());

        mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));

        final JScrollPane scrollPane = new JScrollPane(mainPanel);
        add(scrollPane, BorderLayout.CENTER);

        listOfJList = new ArrayList<>();

        addButtonPanel();
    }

    private void addButtonPanel() {
        final JPanel buttonPanel = new JPanel(new GridLayout());
        selectAll = new JButton("Select All");
        selectAll.addActionListener((ActionEvent e) -> controller.selectAllSubjects());

        buttonPanel.add(selectAll);

        deselectAll = new JButton("Deselect All");
        deselectAll.addActionListener((ActionEvent e) -> controller.deselectAllSubjects());

        buttonPanel.add(deselectAll);
        add(buttonPanel, BorderLayout.SOUTH);
    }

    public void updateView(ImportedData data) {
        mainPanel.removeAll();
        listOfJList.clear();

        data.getFileMap().values().stream().forEach(subjects -> addList(subjects));

        validate();
        repaint();
    }

    private void addList(Subjects subjects) {
        DefaultListModel<Subject> defaultListModel = new DefaultListModel<>();
        subjects.getSubjectList().forEach(subject -> defaultListModel.addElement(subject));

        JList<Subject> jList = new JList<>(defaultListModel);
        jList.setFixedCellWidth(90);
        jList.setLayoutOrientation(JList.VERTICAL_WRAP);

        jList.setSelectionModel(new DefaultListSelectionModel() {
            @Override
            public void setSelectionInterval(int index0, int index1) {
                if (jList.isSelectedIndex(index0)) {
                    jList.removeSelectionInterval(index0, index1);
                } else {
                    jList.addSelectionInterval(index0, index1);
                }
            }
        });

        jList.addListSelectionListener((ListSelectionEvent e) -> {
            if (e.getValueIsAdjusting()) {
                Subject subject = jList.getModel().getElementAt(e.getFirstIndex());
                controller.changeSelectionForSubject(subject);
            }
        });

        jList.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    int index = jList.locationToIndex(e.getPoint());
                    Subject subject = jList.getModel().getElementAt(index);

                    JPopupMenu menu = new JPopupMenu();
                    JMenuItem editName = new JMenuItem("Edit inscription");
                    editName.addActionListener((ActionEvent actionEvent) -> {
                        String name = JOptionPane.showInputDialog(null, "Change inscription from " + subject.getSubjectId());

                        if (StringUtils.isNotBlank(name)) {
                            System.out.println("new name:" + name);
                            controller.updateName(subject, name);
                        }
                    });
                    menu.add(editName);
                    menu.show(jList, e.getPoint().x, e.getPoint().y);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        listOfJList.add(jList);
        setSelectedItemsInJList(jList);

        JScrollPane paneForOneFile = new JScrollPane(jList);

        paneForOneFile.setMinimumSize(new Dimension(100, 50));
        paneForOneFile.setBorder(BorderFactory.createTitledBorder(subjects.getFileName()));

        mainPanel.add(paneForOneFile);
    }

    private void setSelectedItemsInJList(JList jList) {
        ListModel<Subject> subjects = jList.getModel();

        List<Integer> selectedIndices = new ArrayList<>();

        for (int i = 0; i < subjects.getSize(); i++) {
            if (subjects.getElementAt(i).isSelected()) {
                selectedIndices.add(i);
            }
        }
        jList.setSelectedIndices(ArrayUtils.toPrimitive(selectedIndices.toArray(new Integer[0])));
    }

    public void setController(DataPanelController controller) {
        this.controller = controller;
    }

    public void toggleButtons(boolean isEnabled) {
        selectAll.setEnabled(isEnabled);
        deselectAll.setEnabled(isEnabled);
    }
}