{
  "_args": [
    [
      {
        "raw": "sylvester@github:kaosat-dev/node-sylvester",
        "scope": null,
        "escapedName": "sylvester",
        "name": "sylvester",
        "rawSpec": "github:kaosat-dev/node-sylvester",
        "spec": "github:kaosat-dev/node-sylvester",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:kaosat-dev/node-sylvester.git",
          "sshUrl": "git+ssh://git@github.com/kaosat-dev/node-sylvester.git",
          "httpsUrl": "git+https://github.com/kaosat-dev/node-sylvester.git",
          "gitUrl": "git://github.com/kaosat-dev/node-sylvester.git",
          "shortcut": "github:kaosat-dev/node-sylvester",
          "directUrl": "https://raw.githubusercontent.com/kaosat-dev/node-sylvester/master/package.json"
        }
      },
      "C:\\Users\\Hein Min Htike\\AppData\\Roaming\\npm\\node_modules\\@jscad\\openjscad\\node_modules\\@jscad\\openscad-openjscad-translator"
    ]
  ],
  "_from": "kaosat-dev/node-sylvester",
  "_id": "sylvester@0.0.21",
  "_inCache": true,
  "_location": "/@jscad/openjscad/sylvester",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sylvester@github:kaosat-dev/node-sylvester",
    "scope": null,
    "escapedName": "sylvester",
    "name": "sylvester",
    "rawSpec": "github:kaosat-dev/node-sylvester",
    "spec": "github:kaosat-dev/node-sylvester",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:kaosat-dev/node-sylvester.git",
      "sshUrl": "git+ssh://git@github.com/kaosat-dev/node-sylvester.git",
      "httpsUrl": "git+https://github.com/kaosat-dev/node-sylvester.git",
      "gitUrl": "git://github.com/kaosat-dev/node-sylvester.git",
      "shortcut": "github:kaosat-dev/node-sylvester",
      "directUrl": "https://raw.githubusercontent.com/kaosat-dev/node-sylvester/master/package.json"
    }
  },
  "_requiredBy": [
    "/@jscad/openjscad/@jscad/openscad-openjscad-translator"
  ],
  "_resolved": "git://github.com/kaosat-dev/node-sylvester.git#d821b49e87d58b37d52ba29d48b437b854f4ee72",
  "_shasum": "e2244d3e64adc3b9cd877b53648a428928466430",
  "_shrinkwrap": null,
  "_spec": "sylvester@github:kaosat-dev/node-sylvester",
  "_where": "C:\\Users\\Hein Min Htike\\AppData\\Roaming\\npm\\node_modules\\@jscad\\openjscad\\node_modules\\@jscad\\openscad-openjscad-translator",
  "author": {
    "name": "Chris Umbel",
    "email": "chris@chrisumbel.com"
  },
  "browser": {
    "lapack": false
  },
  "dependencies": {
    "lapack": "^0.1.0"
  },
  "description": "node.js implementation of James Coglan's \"Sylvester\" matrix math library.",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-preset-es2015": "^6.18.0",
    "babel-register": "^6.18.0",
    "bluebird": "^3.4.7",
    "chai": "^3.5.0",
    "esdoc": "^0.5.2",
    "mocha": "^3.2.0",
    "npm-run-all": "^4.0.0",
    "rimraf": "^2.5.4",
    "xo": "^0.17.1"
  },
  "engines": {
    "node": ">=0.2.6"
  },
  "gitHead": "d821b49e87d58b37d52ba29d48b437b854f4ee72",
  "keywords": [
    "matrix",
    "vector",
    "linear",
    "line",
    "algebra",
    "matrices"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "Chris Umbel",
      "email": "chris@chrisumbel.com",
      "url": "http://www.chrisumbel.com"
    },
    {
      "name": "Rob Ellis",
      "email": "rob@silentrob.me"
    },
    {
      "name": "Connor Peet",
      "email": "connor@peet.io"
    }
  ],
  "name": "sylvester",
  "optionalDependencies": {
    "lapack": "^0.1.0"
  },
  "readme": "# sylvester\r\n\r\nModern and expanded implementation of James Coglan's \"Sylvester\" matrix math library. The original project can be found at http://sylvester.jcoglan.com/\r\n\r\n# Documentation\r\n\r\nThe original documentation for \"Sylvester\" should help you through basic operations. An intro that contains node-specific features  can also be found {on Chris Umbel's blog}[http://www.chrisumbel.com/article/sylvester_node_js_matrix_vector_math]. We're looking for someone to help get the documentation situation under control.\r\n\r\n# Installation\r\n\r\n    npm install sylvester\r\n\r\n# Usage\r\n\r\n## New Stuff\r\n\r\nFirst I'd like to show some examples of features that aren't in the standard (non-node) Sylvester. I'll likely attempt to commit these back to Sylvester at some point soon.\r\n\r\nNote that the decompositions are all available in pure JavaScript, but if the [lapack](https://github.com/NaturalNode/node-lapack) NPM is installed with LAPACK built as a shared library then efficient native code will be used. The LAPACK integration is still *highly* experimental.\r\n\r\n### Vector\r\n\r\n    require('sylvester');\r\n    var a = $V([1, 2, 3]);\r\n\r\nelement-wise log:\r\n\r\n    console.log(a.log());\r\n\r\nnorm computation:\r\n\r\n    console.log(a.norm());\r\n\r\nelement-wise multiplication:\r\n\r\n    a.elementMultiply(vector);\r\n\r\nelement-wise division:\r\n\r\n    a.elementDivide(vector);\r\n\r\nremove first n nodes:\r\n\r\n    a.chomp(n);\r\n\r\nreturn vector with first n nodes:\r\n\r\n    a.top(n);\r\n\r\nadd all elements into a single scalar:\r\n\r\n    a.sum()\r\n\r\nmultiply all elements into a single scalar:\r\n\r\n    a.product()\r\n\r\nreturn a vector with the elements parameter on the bottom:\r\n\r\n    a.augment(elements)\r\n\r\n### Matrix\r\n\r\n    var A = $M([[1, 2, 3], [4, 5, 6]]);\r\n\r\nreturn subset of rows, columns:\r\n\r\n    // startRow, endRow, startCol, endCol\r\n    A.slice(2, 3, 2, 3);\r\n\r\ndivide matricies:\r\n\r\n    A.div($M([[0.5, 1], [1, 2], [2, 3]]));\r\n\r\nscalar addition/subtraction\r\n\r\n    A.add(1);\r\n    A.subtract(1);\r\n\r\nelement-wise log:\r\n\r\n    console.log(A.log());\r\n\r\nelement-wise multiplication:\r\n\r\n    A.elementMultiply(vector)\r\n\r\nadd all\telements into a\tsingle scalar:\r\n\r\n    A.sum()\r\n\r\nreturns a vector of the indexes of maximum values ([3 3]):\r\n\r\n    $M([[1, 2, 3], [5, 4, 6]]).maxColumnIndexes()\r\n\r\nreturns a vector of minimum column indexes ([1 2]):\r\n\r\n    $M([[1, 2, 3], [5, 4, 6]]).minColumnIndexes();\r\n\r\nreturns a vector of max values ([3 6]):\r\n\r\n    $M([[1, 2, 3], [5, 4, 6]]).maxColumns()\r\n\r\nreturns a vector of minimum values ([1 4]):\r\n\r\n    $M([[1, 2, 3], [5, 4, 6]]).minColumns()\r\n\r\ncreate a 2x3 matrix of ones:\r\n\r\n    var Ones = Matrix.One(2, 3);\r\n\r\nLU decomposition (with partial pivoting)\r\n\r\n   var lu = A.lu();\r\n   console.log(lu.L);\r\n   console.log(lu.U);\r\n   console.log(lu.P);\r\n\r\nQR decomposition (feature still inefficient and experimental, but uses pure javascript):\r\n\r\n    var qr = A.qr();\r\n    console.log(qr.Q);\r\n    console.log(qr.R);\r\n\r\nSVD decomposition (feature still inefficient and experimental, but uses pure javascript):\r\n\r\n    var svd = A.svd();\r\n    console.log(svd.U);\r\n    console.log(svd.S);\r\n    console.log(svd.V);\r\n\r\nPCA\r\n\r\n    var A = $M([[1, 2], [5, 7]]).pcaProject(1).eql($M([\r\n                [-2.2120098720461616],\r\n                [-8.601913944732665]\r\n            ]);\r\n    var pca = A.pcaProject(1);\r\n    var Z = pca.Z;\r\n    var A = Z.pcaRecover(pca.U);\r\n\r\nSolving systems of equations\r\n\r\n    // sovle Ax = b for x\r\n    var A = $M([[2, 4], [2, 1]]);\r\n    var b = $V([1, 0]);\r\n    console.log(A.solve(b));\r\n\r\n== Old Stuff\r\n\r\nBelow is a basic illustration of standard matrix/vector math using the standard\r\nSylvester API. This documentation is rather incomplete and for further details please consult {the official sylvester API documentation}[http://sylvester.jcoglan.com/docs] at http://sylvester.jcoglan.com/docs.\r\n\r\n### Vectors\r\n\r\n    require('sylvester');\r\n\r\ncreate two vectors:\r\n\r\n    var a = $V([1, 2, 3]);\r\n    var b = $V([2, 3, 4]);\r\n\r\ncompute the dot product:\r\n\r\n    var r = a.dot(b);\r\n\r\nadd two vectors:\r\n\r\n    var c = a.add(b);\r\n\r\nmultiply by scalar:\r\n\r\n    var d = a.x(2);\r\n\r\n### Matrices\r\n\r\n    require('sylvester');\r\n\r\ncreate two matrices:\r\n\r\n    var A = $M([[1, 2], [3, 4]]);\r\n    var B = $M([[1, 2, 3], [4, 5, 6]]);\r\n\r\nmultiply the matrices:\r\n\r\n    var C = A.x(B);\r\n\r\ntranspose a matrix:\r\n\r\n    var B_T = B.transpose();\r\n    // B is 2x3, B_T is 3x2\r\n\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build:babel": "rimraf lib && babel src --out-dir lib",
    "build:doc": "rimraf doc-output && esdoc -c esdoc.json",
    "test": "npm-run-all --parallel --silent test:unit test:lint",
    "test:lint": "xo \"test/**/*.js\" --env=mocha && xo \"src/**/*.js\" \"doc/**/*.js\"",
    "test:unit": "mocha -r test/_setup.js \"test/*.test.js\" --compilers js:babel-register"
  },
  "version": "0.0.21",
  "xo": {
    "esnext": true,
    "space": true,
    "rules": {
      "object-curly-spacing": [
        2,
        "always"
      ],
      "import/prefer-default-export": 0,
      "no-unused-expressions": 0,
      "new-cap": 0
    }
  }
}
